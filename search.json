[{"title":"如何用ESP32实现简短的AI对话","path":"/2024/09/25/如何用ESP32实现简短的AI对话/","content":"开发板型号：ESP32 WROOM 32 配置流程引入必要的库: #include WiFi.h: 用于管理 ESP32 的 WiFi 连接。 #include HTTPClient.h: 用于发起 HTTP 请求。 #include ArduinoJson.h: 用于处理 JSON 数据。 定义常量: ssid 和 password: WiFi 网络的 SSID 和密码。 apiKey: API 密钥，用来验证身份。 inputText: 发送给 API 的初始文本。 apiUrl: API 的 URL 地址。 函数定义:getGPTAnswer(String inputText): 这个函数负责与 API 通信。它创建了一个HTTPClient对象，设置了超时时间，并开始与 API URL 建立连接。然后，它构造了一个 JSON 格式的数据作为请求体，包含了模型信息和用户输入的文本。接着，它发送 POST 请求，并根据返回的状态码判断是否成功。如果成功（状态码为 200），则解析 JSON 响应，并提取出回答文本；如果不成功，则打印错误信息。 setup() 函数: 初始化串行通信。 设置 ESP32 以 STA 模式连接到指定的 WiFi 网络。 等待直到 WiFi 连接成功，并打印设备的 IP 地址。 使用初始的inputText调用getGPTAnswer函数获取 API 的回答，并通过串口打印出来。 loop() 函数: 检查是否有新的串行输入。 如果有新的输入，读取至换行符，并将此输入作为inputText。 再次调用getGPTAnswer函数来获取针对新输入的回答，并通过串口打印。 配置代码#include WiFi.h // 引入WiFi库，用于管理ESP32的WiFi连接#include HTTPClient.h // 引入HTTPClient库，用于发起HTTP请求#include ArduinoJson.h // 引入ArduinoJson库，用于处理JSON数据const char* ssid = Your_SSID; // 定义WiFi的SSIDconst char* password = Your_PASSWORD; // 定义WiFi的密码const char* apiKey = Your_API; // 设置APIString inputText = 你好，通义千问！; // 定义要发送给API的文本String apiUrl = https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation; // 定义API的URLString answer; // 用于存储API返回的答案 String getGPTAnswer(String inputText) // 定义一个函数，用于获取GPT的答案 HTTPClient http; // 创建一个HTTPClient对象 http.setTimeout(10000); // 设置超时时间为10000毫秒 http.begin(apiUrl); // 开始连接到API的URLhttp.addHeader(Content-Type, application/json); // 添加HTTP头，指定内容类型为JSONhttp.addHeader(Authorization, String(apiKey)); // 添加HTTP头，设置授权信息// 构造请求的负载，包含模型信息和输入文本String payload = \\model\\:\\qwen-turbo\\,\\input\\:\\messages\\:[\\role\\: \\system\\,\\content\\: \\这里输入prompt。\\,\\role\\: \\user\\,\\content\\: \\ + inputText + \\];int httpResponseCode = http.POST(payload); // 发送POST请求，并获取响应码if (httpResponseCode == 200) // 如果响应码为200，表示成功String response = http.getString(); // 获取响应体http.end(); // 结束HTTP连接// 解析JSON响应DynamicJsonDocument jsonDoc(1024); // 创建一个JSON文档对象deserializeJson(jsonDoc, response); // 反序列化JSON数据String outputText = jsonDoc[output][text]; // 从JSON中提取输出文本return outputText; // 返回输出文本 else // 如果响应码不是200，表示请求失败http.end(); // 结束HTTP连接Serial.printf(Error %i , httpResponseCode); // 打印错误信息return error; // 返回错误标记void setup() // setup函数，在设备启动时运行一次Serial.begin(115200); // 初始化串行通信，设置波特率为115200WiFi.mode(WIFI_STA); // 设置WiFi为STA（客户端）模式WiFi.begin(ssid, password); // 使用提供的SSID和密码连接到WiFi网络Serial.print(Connecting to WiFi ..); // 打印连接WiFi的信息while (WiFi.status() != WL_CONNECTED) // 等待WiFi连接成功Serial.print(.); // 打印点以表示正在尝试连接delay(1000); // 每秒尝试一次Serial.println(WiFi.localIP()); // 打印设备的IP地址answer = getGPTAnswer(inputText); // 获取API的答案Serial.println(通义千问: + answer); // 打印答案void loop() // loop函数，设备运行期间循环执行if (Serial.available()) // 检查串行端口是否有数据可读inputText = Serial.readStringUntil( ); // 读取输入文本，直到遇到换行符Serial.println( 提问: + inputText); // 打印输入文本answer = getGPTAnswer(inputText); // 再次获取API的答案Serial.println(回答: + answer); // 打印答案","tags":["ESP32"],"categories":["硬件"]},{"title":"如何在本地部署Echarts","path":"/2024/08/22/如何在本地部署Echarts/","content":"本文参考 Echarts 官方使用手册快速上手 - 使用手册 - Apache ECharts 第一步：下载必要的 JS 文件在 Echarts 下载界面下载 - Apache ECharts可以找到多种下载方式，这里推荐两种下方式： 从 github 仓库直接 clone，仓库地址echartsdist at 5.5.1 · apacheecharts (github.com) 从 npm 安装，在控制台输入指令npm install echarts 注意：下载完成后打开 dist 文件夹，将 echarts.js 文件保存到网页目录下 第二步：在网页目录下创建初始页面在网页目录下创建初始页面index.html，此时网页目录下应该存在两个文件，分别是index.html和echarts.js在 index.html 文件中输入配置代码即可，这里提供官网的配置代码 !DOCTYPE htmlhtml head meta charset=utf-8 / titleECharts/title !-- 引入刚刚下载的 ECharts 文件 -- script src=echarts.js/script /head body !-- 为 ECharts 准备一个定义了宽高的 DOM -- div id=main style=width: 600px;height:400px;/div script type=text/javascript // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById(main)); // 指定图表的配置项和数据 var option = title: text: ECharts 入门示例, , tooltip: , legend: data: [销量], , xAxis: data: [衬衫, 羊毛衫, 雪纺衫, 裤子, 高跟鞋, 袜子], , yAxis: , series: [ name: 销量, type: bar, data: [5, 20, 36, 10, 10, 20], , ], ; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); /script /body/html 第三步：预览在浏览器打开 index.html 文件即可看到图表 学习使用 Echarts 绘制图表在 Echarts 官方文档中提供了多种图表的配置方式，有一定的 JS 基础可以快速入门使用快速上手 - 使用手册 - Apache ECharts","tags":["图表绘制"],"categories":["软件"]},{"title":"数字电路实验——数字钟设计","path":"/2024/06/23/数字电路实验————数字钟/","content":"说明：使用开发板为Nexys4 DDR，仅供交流学习使用，由于时间仓促，可能存在结构不清晰、逻辑不严密等问题，欢迎邮件联系交流。 主体结构代码1000Hz 时钟分频模块介绍： 该模块将原本的 100MHz 的时钟频率分频为 1000Hz，并传出给状态转换模块使用。 源码： module cp_1000hz( input CP, output reg CLK = 0); reg [15:0] state; always @(posedge CP) begin if (state 49999) state = state + 1b1; else begin CLK = ~CLK; state = 0; end endendmodule 1Hz 时钟分频模块介绍： 该模块将原本的 100MHz 的时钟频率分频为 1Hz，并传出给状态转换模块使用。 源码： module cp_1hz(input CP,output reg CLK = 0);reg [31:0] state;always @(posedge CP) beginif (state 49999999)state = state + 1b1;else beginCLK = ~CLK;state = 0;endendendmodule 按键防抖模块介绍： 该模块可以对按键进行防抖动处理。 源码： module FDD (input wire clk,input wire button_in,input wire CHO_SET,output reg jia_min = 0,output reg jia_hour = 0);reg [3:0] debounce_reg = 4b0000;always @(posedge clk) begindebounce_reg = debounce_reg[2:0], button_in;if (debounce_reg == 4b0000)beginif(CHO_SET)beginjia_hour = 0;endelse if(~CHO_SET)beginjia_min = 0;endendelse if (debounce_reg == 4b1111)beginif(CHO_SET)beginjia_hour = 1;endelse if(~CHO_SET)beginjia_min = 1;endendendendmodule 秒钟计数模块介绍： 该模块可以实现秒钟的计数，并返回分钟的进位信号。 源码： module COUNT_miao(input wire clk,input wire reset,output reg [3:0] miao_shi,output reg [3:0] miao_ge,output reg miao_jin = 0);always @(posedge clk or negedge reset) beginif (~reset) beginmiao_shi = 4b0000;miao_ge = 4b0000;endelse beginif (miao_ge == 4b1001) beginmiao_ge = 4b0000;if (miao_shi == 4b0101) beginmiao_shi = 4b0000;miao_jin = 1b1;endelse beginmiao_shi = miao_shi + 4b0001;miao_jin = 1b0;endendelse beginmiao_ge = miao_ge + 4b0001;miao_jin = 1b0;endendendendmodule 分钟计数模块介绍： 该模块可以实现分钟的计数，并返回时钟的进位信号，还可以通过改变驱动源来切换到计时模式和调时模式。 源码： module COUNT_min(input wire reset,input wire miao_jin,input wire jiajian_min,input wire jiajian,input wire TJ_clock,output reg [3:0] min_shi,output reg [3:0] min_ge,output reg min_jin = 0);reg min_clock=0;always@(*)beginif(~TJ_clock)beginmin_clock = miao_jin;endelse if(TJ_clock)beginmin_clock = jiajian_min;endendalways @(negedge reset or posedge min_clock) beginif (~reset) beginmin_shi = 4b0000;min_ge = 4b0000;endelse if(jiajian TJ_clock) beginif (min_ge == 4b1001) beginmin_ge = 4b0000;if (min_shi == 4b0101) beginmin_shi = 4b0000;min_jin = 1b1;endelse beginmin_shi = min_shi + 4b0001;min_jin = 1b0;endendelse beginmin_ge = min_ge + 4b0001;min_jin = 1b0;endendelse if(~jiajian TJ_clock)beginif (min_ge == 4b0000 min_shi 4b0000) beginmin_ge = 4b1001;min_shi = min_shi - 4b0001;endelse if(min_ge0)beginmin_ge = min_ge - 4b0001;endendelse beginif (min_ge == 4b1001) beginmin_ge = 4b0000;if (min_shi == 4b0101) beginmin_shi = 4b0000;min_jin = 1b1;endelse beginmin_shi = min_shi + 4b0001;min_jin = 1b0;endendelse beginmin_ge = min_ge + 4b0001;min_jin = 1b0;endendendendmodule 时钟计数模块介绍： 该模块可以实现时钟的计数，并且可以通过改变驱动源来切换到计时模式和调时模式。 源码： module COUNT_hour(input wire reset,input wire min_jin,input wire jiajian_hour,input wire jiajian,input wire TJ_clock,output reg [3:0] hour_shi,output reg [3:0] hour_ge);reg hour_clock=0;always@(*)beginif(~TJ_clock)beginhour_clock = min_jin;endelse if(TJ_clock)beginhour_clock = jiajian_hour;endendalways @(negedge reset or posedge hour_clock) beginif (~reset) beginhour_shi = 4b0000;hour_ge = 4b0000;endelse if(jiajian TJ_clock) beginif (hour_ge == 4b0011 hour_shi == 4b0010) beginhour_ge = 4b0000;hour_shi = 4b0000;endelse if (hour_ge == 4b1001) beginhour_ge = 4b0000;hour_shi = hour_shi + 4b0001;endelse beginhour_ge = hour_ge + 4b0001;endendelse if(~jiajian TJ_clock) beginif (hour_ge == 4b0000 hour_shi 4b0000) beginhour_ge = 4b1001;hour_shi = hour_shi - 4b0001;endelse if(hour_ge0)beginhour_ge = hour_ge - 4b0001;endendelse beginif (hour_ge == 4b0011 hour_shi == 4b0010) beginhour_ge = 4b0000;hour_shi = 4b0000;endelse if (hour_ge == 4b1001) beginhour_ge = 4b0000;hour_shi = hour_shi + 4b0001;endelse beginhour_ge = hour_ge + 4b0001;endendendendmodule 时、分、秒计数模块介绍： 该模块是时、分、秒三个计数模块的顶层模块，将三个计时模块连接起来形成一个统一的模块，实现层次化设计。 源码： module COUNT(input wire clk,input wire reset,input wire jiajian_hour,input wire jiajian_min,input wire jiajian,input wire TJ_clock,output wire [3:0] hour_shi,output wire [3:0] hour_ge,output wire [3:0] min_shi,output wire [3:0] min_ge,output wire [3:0] miao_shi,output wire [3:0] miao_ge);wire miao_jin;wire min_jin;COUNT_miao COUNT_miao_inst(.reset(reset),.clk(clk),.miao_shi(miao_shi),.miao_ge(miao_ge),.miao_jin(miao_jin));COUNT_min COUNT_min_inst(.reset(reset),.min_shi(min_shi),.min_ge(min_ge),.miao_jin(miao_jin),.min_jin(min_jin),.jiajian_min(jiajian_min),.jiajian(jiajian),.TJ_clock(TJ_clock));COUNT_hour COUNT_hour_inst(.reset(reset),.hour_shi(hour_shi),.hour_ge(hour_ge),.jiajian_hour(jiajian_hour),.jiajian(jiajian),.TJ_clock(TJ_clock),.min_jin(min_jin));endmodule 12 小时制-24 小时制切换模块介绍： 该模块可以实现 12 小时制与 24 小时制的切换。 源码： module TO24_12(input wire cho24_12,input wire [3:0] hour_shi_in,input wire [3:0] hour_ge_in,output reg [3:0] hour_shi_out,output reg [3:0] hour_ge_out,output reg [3:0] P_A);always @(*)beginif(~cho24_12)beginif ((hour_shi_in == 4b0001 hour_ge_in 4b0010) || (hour_shi_in 4b0001)) beginif(hour_shi_in == 4b0010 hour_ge_in == 4b0000)beginhour_shi_out = 4b0000;hour_ge_out = 4b1000;P_A = 4b1111;endelse if(hour_shi_in == 4b0010 hour_ge_in == 4b0001)beginhour_shi_out = 4b0000;hour_ge_out = 4b1001;P_A = 4b1111;endelse beginhour_shi_out = hour_shi_in - 4b0001;hour_ge_out = hour_ge_in - 4b0010;P_A = 4b1111;endendelse beginhour_shi_out = hour_shi_in;hour_ge_out = hour_ge_in;P_A = 4b1110;endendif(cho24_12)beginhour_shi_out = hour_shi_in;hour_ge_out = hour_ge_in;P_A = 4b1011;endendendmodule 屏幕显示模式切换模块介绍： 该模块可以在时钟模式与闹钟模式两种显示模式之间切换。 源码： module mode(input wire mode,input wire [3:0] P_A,input wire [3:0] hour_shi,input wire [3:0] hour_ge,input wire [3:0] min_shi,input wire [3:0] min_ge,input wire [3:0] miao_shi,input wire [3:0] miao_ge,input wire [3:0] hour_shi_alarm,input wire [3:0] hour_ge_alarm,input wire [3:0] min_shi_alarm,input wire [3:0] min_ge_alarm,output reg [3:0] hour_shi_top,output reg [3:0] hour_ge_top,output reg [3:0] min_shi_top,output reg [3:0] min_ge_top,output reg [3:0] miao_shi_top,output reg [3:0] miao_ge_top,output reg [3:0] P_A_top);always @(*)beginif(~mode)beginhour_shi_top = hour_shi;hour_ge_top = hour_ge;min_shi_top = min_shi;min_ge_top = min_ge;miao_shi_top = miao_shi;miao_ge_top = miao_ge;P_A_top = P_A;endelse if(mode)beginhour_shi_top = hour_shi_alarm;hour_ge_top = hour_ge_alarm;min_shi_top = min_shi_alarm;min_ge_top = min_ge_alarm;miao_shi_top = 4b0000;miao_ge_top = 4b0000;P_A_top = 4b1100;endendendmodule 位选模块介绍： 该模块可以实现 1000Hz 频率下的七段数码管的循环位选。 源码： module SEG_CHO (input wire clk_1000hz,input wire [3:0] hour_shi,input wire [3:0] hour_ge,input wire [3:0] min_shi,input wire [3:0] min_ge,input wire [3:0] miao_shi,input wire [3:0] miao_ge,input wire [3:0] P_A,output reg [7:0] seg_cho,output reg [3:0] seg);reg [2:0] counter = 3b000;always@(posedge clk_1000hz)begincase(counter)3b000:beginseg_cho = 8b11111110;seg = miao_ge;counter = counter+3b001;end3b001:beginseg_cho = 8b11111101;seg = miao_shi;counter = counter+3b001;end3b010:beginseg_cho = 8b11111011;seg = min_ge;counter = counter+3b001;end3b011:beginseg_cho = 8b11110111;seg = min_shi;counter = counter+3b001;end3b100:beginseg_cho = 8b11101111;seg = hour_ge;counter = counter+3b001;end3b101:beginseg_cho = 8b11011111;seg = hour_shi;counter = counter+3b001;end3b110:beginseg_cho = 8b10111111;seg = 4b1011;counter = counter+3b001;end3b111:beginseg_cho = 8b01111111;seg = P_A;counter = 3b000;endendcaseendendmodule 七段数码管译码模块介绍： 该模块可以实现对输入信号到七段数码管显示信号的译码。 源码： module SEG(input [3:0] IN,output reg[6:0] show=0);always@(IN)begincase(IN)4b0000:show=7b100_0000;4b0001:show=7b111_1001;4b0010:show=7b010_0100;4b0011:show=7b011_0000;4b0100:show=7b001_1001;4b0101:show=7b001_0010;4b0110:show=7b000_0010;4b0111:show=7b111_1000;4b1000:show=7b000_0000;4b1001:show=7b001_0000;4b1110:show=7b000_1000;4b1111:show=7b000_1100;default:show=7b111_1111;endcaseendendmodule 闹钟设置模块介绍： 该模块可以设置该时钟的闹钟，当计时模块的时钟和分钟与闹钟设置的相同时，会触发闹钟，即流水灯。 源码： module alarm(input clk,input button_in_alarm,input jiajian_alarm,input CHO_SET_alarm,output reg [3:0] hour_shi_alarm = 4b0000,output reg [3:0] hour_ge_alarm = 4b0000,output reg [3:0] min_shi_alarm = 4b0000,output reg [3:0] min_ge_alarm = 4b0000);reg min_clock_alarm = 0;reg hour_clock_alarm = 0;reg [3:0] debounce_reg_alarm = 4b0000;always @(posedge clk) begindebounce_reg_alarm = debounce_reg_alarm[2:0], button_in_alarm;if (debounce_reg_alarm == 4b0000)beginif(CHO_SET_alarm)beginhour_clock_alarm = 0;endelse if(~CHO_SET_alarm)beginmin_clock_alarm = 0;endendelse if (debounce_reg_alarm == 4b1111)beginif(CHO_SET_alarm)beginhour_clock_alarm = 1;endelse if(~CHO_SET_alarm)beginmin_clock_alarm = 1;endendendalways @(posedge min_clock_alarm) beginif(jiajian_alarm) beginif (min_ge_alarm == 4b1001) beginmin_ge_alarm = 4b0000;if (min_shi_alarm == 4b0101) beginmin_shi_alarm = 4b0000;endelse beginmin_shi_alarm = min_shi_alarm + 4b0001;endendelse beginmin_ge_alarm = min_ge_alarm + 4b0001;endendelse if(~jiajian_alarm)beginif (min_ge_alarm == 4b0000 min_shi_alarm 4b0000) beginmin_ge_alarm = 4b1001;min_shi_alarm = min_shi_alarm - 4b0001;endelse if(min_ge_alarm0)beginmin_ge_alarm = min_ge_alarm - 4b0001;endendendalways @(posedge hour_clock_alarm) beginif(jiajian_alarm) beginif (hour_ge_alarm == 4b0011 hour_shi_alarm == 4b0010) beginhour_ge_alarm = 4b0000;hour_shi_alarm = 4b0000;endelse if (hour_ge_alarm == 4b1001) beginhour_ge_alarm = 4b0000;hour_shi_alarm = hour_shi_alarm + 4b0001;endelse beginhour_ge_alarm = hour_ge_alarm + 4b0001;endendelse if(~jiajian_alarm) beginif (hour_ge_alarm == 4b0000 hour_shi_alarm 4b0000) beginhour_ge_alarm = 4b1001;hour_shi_alarm = hour_shi_alarm - 4b0001;endelse if(hour_ge_alarm0)beginhour_ge_alarm = hour_ge_alarm - 4b0001;endendelse beginif (hour_ge_alarm == 4b0011 hour_shi_alarm == 4b0010) beginhour_ge_alarm = 4b0000;hour_shi_alarm = 4b0000;endelse if (hour_ge_alarm == 4b1001) beginhour_ge_alarm = 4b0000;hour_shi_alarm = hour_shi_alarm + 4b0001;endelse beginhour_ge_alarm = hour_ge_alarm + 4b0001;endendendendmodule 闹钟触发流水灯模块介绍： 当闹钟被触发后，该模块使能，即流水灯开始工作。 源码： module alarm_led(input wire clk, // 时钟信号input wire [3:0] hour_shi_alarm,input wire [3:0] hour_ge_alarm,input wire [3:0] min_shi_alarm,input wire [3:0] min_ge_alarm,input wire [3:0] hour_shi,input wire [3:0] hour_ge,input wire [3:0] min_shi,input wire [3:0] min_ge,output reg [15:0] led_out // LED输出信号);reg [3:0] counter = 4b0000; // 计数器reg [15:0] led; // 移位寄存器wire [15:0] num_alarm;wire [15:0] num;assign num_alarm = hour_shi_alarm, hour_ge_alarm, min_shi_alarm, min_ge_alarm;assign num = hour_shi, hour_ge, min_shi, min_ge;reg [15:0] state = 0;reg clk_5hz = 0;always @(posedge clk) beginif (state 49)state = state + 1b1;else beginclk_5hz = ~clk_5hz;state = 0;endendalways @(posedge clk_5hz) beginif (counter == 4b1111)begincounter = 4b0000; // 计数器满时重置endelse begincounter = counter + 1; // 递增计数器endcase(counter)4b0000:led=16b0000000000000011;4b0001:led=16b0000000000000111;4b0010:led=16b0000000000001111;4b0011:led=16b0000000000011111;4b0100:led=16b0000000000111111;4b0101:led=16b0000000001111100;4b0110:led=16b0000000011111000;4b0111:led=16b0000000111110000;4b1000:led=16b0000001111100000;4b1001:led=16b0000011111000000;4b1010:led=16b0000111110000000;4b1011:led=16b0001111100000000;4b1100:led=16b0011111000000000;4b1101:led=16b0111110000000000;4b1110:led=16b1111100000000000;4b1111:led=16b1111000000000001;default:led=16b1111111111111111;endcaseif(num == num_alarm)beginled_out = led;endelse beginled_out = 16b0000000000000000;endendendmodule 整点报时模块介绍： 该模块可以实现整点报时，而且灯闪烁的次数与当前的小时制有关，即闪烁次数总是与时钟正在显示的值相同。当下午 5 点报时，若为 12 小时制，则闪烁 5 次；若为 24 小时制，则闪烁 17 次。 源码： module ZDBS(input wire clk,input wire [3:0] hour_shi,input wire [3:0] hour_ge,input wire [3:0] min_shi,input wire [3:0] min_ge,input wire [3:0] miao_shi,input wire [3:0] miao_ge,output reg zdbs_led = 0);reg [3:0] hour_shi_dec;reg [3:0] hour_ge_dec;reg [7:0] num = 8b0000000;reg [7:0] num_count = 8b0000000;reg [15:0] state = 0;reg clk_5hz = 0;always @(*) begincase(hour_shi)4b0000: hour_shi_dec = 0;4b0001: hour_shi_dec = 1;4b0010: hour_shi_dec = 2;4b0011: hour_shi_dec = 3;default: hour_shi_dec = 0; // 默认值endcasecase(hour_ge)4b0000: hour_ge_dec = 0;4b0001: hour_ge_dec = 1;4b0010: hour_ge_dec = 2;4b0011: hour_ge_dec = 3;4b0100: hour_ge_dec = 4;4b0101: hour_ge_dec = 5;4b0110: hour_ge_dec = 6;4b0111: hour_ge_dec = 7;4b1000: hour_ge_dec = 8;4b1001: hour_ge_dec = 9;default: hour_ge_dec = 0; // 默认值endcaseendalways @(posedge clk) beginif (state 149)state = state + 1b1;else beginclk_5hz = ~clk_5hz;state = 0;endendalways @(posedge clk_5hz) beginnum = hour_shi_dec * 10 + hour_ge_dec;if((min_shi == 4b0000) (min_ge == 4b0000) (miao_shi == 4b0000) (miao_ge == 4b0000) (num_count == 8b00000000))beginnum_count = (num + 1) * 2;endif(num_count != 8b00000000)beginzdbs_led = ~zdbs_led;num_count = num_count - 1;endendendmodule 数字钟顶层模块介绍： 该模块将所有模块按照逻辑顺序依次连接，形成统一整体。 源码： module SZZ_TOP(input CP,reset,button_in,button_in_alarm,input CHO_SET,CHO_SET_alarm,input TJ_clock,jiajian,jiajian_alarm,input mode,input cho24_12,output [6:0]SEG_Out,output [7:0]SEG_CHO,output [15:0] led_out,output zdbs_led);wire CLK_1hz;wire CLK_1000hz;wire [3:0] hour_shi_24to12;wire [3:0] hour_ge_24to12;wire [3:0] P_A;wire [3:0] P_A_top;wire [3:0] hour_shi;wire [3:0] hour_ge;wire [3:0] min_shi;wire [3:0] min_ge;wire [3:0] miao_shi;wire [3:0] miao_ge;wire [3:0] seg;wire jia_min,jia_hour;wire [3:0] hour_shi_alarm;wire [3:0] hour_ge_alarm;wire [3:0] min_shi_alarm;wire [3:0] min_ge_alarm;wire [3:0] hour_shi_top;wire [3:0] hour_ge_top;wire [3:0] min_shi_top;wire [3:0] min_ge_top;wire [3:0] miao_shi_top;wire [3:0] miao_ge_top;TO24_12 TO24_12_inst(.cho24_12(cho24_12),.hour_shi_in(hour_shi_24to12),.hour_ge_in(hour_ge_24to12),.hour_shi_out(hour_shi),.hour_ge_out(hour_ge),.P_A(P_A));ZDBS ZDBS_inst(.clk(CLK_1000hz),.hour_shi(hour_shi),.hour_ge(hour_ge),.min_shi(min_shi),.min_ge(min_ge),.miao_shi(miao_shi),.miao_ge(miao_ge),.zdbs_led(zdbs_led));alarm_led alarm_led_inst(.clk(CLK_1000hz),.hour_shi_alarm(hour_shi_alarm),.hour_ge_alarm(hour_ge_alarm),.min_shi_alarm(min_shi_alarm),.min_ge_alarm(min_ge_alarm),.hour_shi(hour_shi_24to12),.hour_ge(hour_ge_24to12),.min_shi(min_shi),.min_ge(min_ge),.led_out(led_out));alarm alarm_indust(.clk(CLK_1000hz),.button_in_alarm(button_in_alarm),.jiajian_alarm(jiajian_alarm),.CHO_SET_alarm(CHO_SET_alarm),.hour_shi_alarm(hour_shi_alarm),.hour_ge_alarm(hour_ge_alarm),.min_shi_alarm(min_shi_alarm),.min_ge_alarm(min_ge_alarm));mode mode_inst(.mode(mode),.hour_shi(hour_shi),.hour_ge(hour_ge),.min_shi(min_shi),.min_ge(min_ge),.miao_shi(miao_shi),.miao_ge(miao_ge),.hour_shi_alarm(hour_shi_alarm),.hour_ge_alarm(hour_ge_alarm),.min_shi_alarm(min_shi_alarm),.min_ge_alarm(min_ge_alarm),.hour_shi_top(hour_shi_top),.hour_ge_top(hour_ge_top),.min_shi_top(min_shi_top),.min_ge_top(min_ge_top),.miao_shi_top(miao_shi_top),.miao_ge_top(miao_ge_top),.P_A(P_A),.P_A_top(P_A_top));FDD FDD_inst(.clk(CLK_1000hz),.button_in(button_in),.CHO_SET(CHO_SET),.jia_min(jia_min),.jia_hour(jia_hour));cp_1hz CP_1hz(.CP(CP),.CLK(CLK_1hz));cp_1000hz CP_1000hz(.CP(CP),.CLK(CLK_1000hz));COUNT COUNT_inst(.reset(reset),.clk(CLK_1hz),.hour_shi(hour_shi_24to12),.hour_ge(hour_ge_24to12),.min_shi(min_shi),.min_ge(min_ge),.miao_shi(miao_shi),.miao_ge(miao_ge),.jiajian_hour(jia_hour),.jiajian_min(jia_min),.jiajian(jiajian),.TJ_clock(TJ_clock));SEG_CHO SEG_CHO_inst(.clk_1000hz(CLK_1000hz),.hour_shi(hour_shi_top),.hour_ge(hour_ge_top),.min_shi(min_shi_top),.min_ge(min_ge_top),.miao_shi(miao_shi_top),.miao_ge(miao_ge_top),.seg_cho(SEG_CHO),.P_A(P_A_top),.seg(seg));SEG SEG_inst(.IN(seg),.show(SEG_Out));endmodule 管脚定义set_property -dict PACKAGE_PIN J15 IOSTANDARD LVCMOS33 [get_ports reset]set_property -dict PACKAGE_PIN L16 IOSTANDARD LVCMOS33 [get_ports cho24_12]set_property -dict PACKAGE_PIN M13 IOSTANDARD LVCMOS33 [get_ports TJ_clock ]; #IO_L6N_T0_D08_VREF_14 Sch=sw[2]set_property -dict PACKAGE_PIN R15 IOSTANDARD LVCMOS33 [get_ports CHO_SET ]; #IO_L13N_T2_MRCC_14 Sch=sw[3]set_property -dict PACKAGE_PIN R17 IOSTANDARD LVCMOS33 [get_ports jiajian ]; #IO_L12N_T1_MRCC_14 Sch=sw[4]set_property -dict PACKAGE_PIN T18 IOSTANDARD LVCMOS33 [get_ports mode ]; #IO_L7N_T1_D10_14 Sch=sw[5]set_property -dict PACKAGE_PIN U18 IOSTANDARD LVCMOS33 [get_ports CHO_SET_alarm ]; #IO_L17N_T2_A13_D29_14 Sch=sw[6]set_property -dict PACKAGE_PIN R13 IOSTANDARD LVCMOS33 [get_ports jiajian_alarm ]; #IO_L5N_T0_D07_14 Sch=sw[7]set_property -dict PACKAGE_PIN H17 IOSTANDARD LVCMOS33 [get_ports led_out[0] ]; #IO_L18P_T2_A24_15 Sch=led[0]set_property -dict PACKAGE_PIN K15 IOSTANDARD LVCMOS33 [get_ports led_out[1] ]; #IO_L24P_T3_RS1_15 Sch=led[1]set_property -dict PACKAGE_PIN J13 IOSTANDARD LVCMOS33 [get_ports led_out[2] ]; #IO_L17N_T2_A25_15 Sch=led[2]set_property -dict PACKAGE_PIN N14 IOSTANDARD LVCMOS33 [get_ports led_out[3] ]; #IO_L8P_T1_D11_14 Sch=led[3]set_property -dict PACKAGE_PIN R18 IOSTANDARD LVCMOS33 [get_ports led_out[4] ]; #IO_L7P_T1_D09_14 Sch=led[4]set_property -dict PACKAGE_PIN V17 IOSTANDARD LVCMOS33 [get_ports led_out[5] ]; #IO_L18N_T2_A11_D27_14 Sch=led[5]set_property -dict PACKAGE_PIN U17 IOSTANDARD LVCMOS33 [get_ports led_out[6] ]; #IO_L17P_T2_A14_D30_14 Sch=led[6]set_property -dict PACKAGE_PIN U16 IOSTANDARD LVCMOS33 [get_ports led_out[7] ]; #IO_L18P_T2_A12_D28_14 Sch=led[7]set_property -dict PACKAGE_PIN V16 IOSTANDARD LVCMOS33 [get_ports led_out[8] ]; #IO_L16N_T2_A15_D31_14 Sch=led[8]set_property -dict PACKAGE_PIN T15 IOSTANDARD LVCMOS33 [get_ports led_out[9] ]; #IO_L14N_T2_SRCC_14 Sch=led[9]set_property -dict PACKAGE_PIN U14 IOSTANDARD LVCMOS33 [get_ports led_out[10] ]; #IO_L22P_T3_A05_D21_14 Sch=led[10]set_property -dict PACKAGE_PIN T16 IOSTANDARD LVCMOS33 [get_ports led_out[11] ]; #IO_L15N_T2_DQS_DOUT_CSO_B_14 Sch=led[11]set_property -dict PACKAGE_PIN V15 IOSTANDARD LVCMOS33 [get_ports led_out[12] ]; #IO_L16P_T2_CSI_B_14 Sch=led[12]set_property -dict PACKAGE_PIN V14 IOSTANDARD LVCMOS33 [get_ports led_out[13] ]; #IO_L22N_T3_A04_D20_14 Sch=led[13]set_property -dict PACKAGE_PIN V12 IOSTANDARD LVCMOS33 [get_ports led_out[14] ]; #IO_L20N_T3_A07_D23_14 Sch=led[14]set_property -dict PACKAGE_PIN V11 IOSTANDARD LVCMOS33 [get_ports led_out[15] ]; #IO_L21N_T3_DQS_A06_D22_14 Sch=led[15]set_property -dict PACKAGE_PIN M16 IOSTANDARD LVCMOS33 [get_ports zdbs_led ]; #IO_L10P_T1_D14_14 Sch=led16_gset_property -dict PACKAGE_PIN E3 IOSTANDARD LVCMOS33 [get_ports CP]set_property -dict PACKAGE_PIN M18 IOSTANDARD LVCMOS33 [get_ports button_in]set_property -dict PACKAGE_PIN P18 IOSTANDARD LVCMOS33 [get_ports button_in_alarm ]; #IO_L9N_T1_DQS_D13_14 Sch=btndset_property -dict PACKAGE_PIN T10 IOSTANDARD LVCMOS33 [get_ports SEG_Out[0]]set_property -dict PACKAGE_PIN R10 IOSTANDARD LVCMOS33 [get_ports SEG_Out[1]]set_property -dict PACKAGE_PIN K16 IOSTANDARD LVCMOS33 [get_ports SEG_Out[2]]set_property -dict PACKAGE_PIN K13 IOSTANDARD LVCMOS33 [get_ports SEG_Out[3]]set_property -dict PACKAGE_PIN P15 IOSTANDARD LVCMOS33 [get_ports SEG_Out[4]]set_property -dict PACKAGE_PIN T11 IOSTANDARD LVCMOS33 [get_ports SEG_Out[5]]set_property -dict PACKAGE_PIN L18 IOSTANDARD LVCMOS33 [get_ports SEG_Out[6]]set_property -dict PACKAGE_PIN J17 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[0]]set_property -dict PACKAGE_PIN J18 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[1]]set_property -dict PACKAGE_PIN T9 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[2]]set_property -dict PACKAGE_PIN J14 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[3]]set_property -dict PACKAGE_PIN P14 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[4]]set_property -dict PACKAGE_PIN T14 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[5]]set_property -dict PACKAGE_PIN K2 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[6]]set_property -dict PACKAGE_PIN U13 IOSTANDARD LVCMOS33 [get_ports SEG_CHO[7]]#set_property -dict PACKAGE_PIN H15 IOSTANDARD LVCMOS33 [get_ports test ]; #IO_L19N_T3_A21_VREF_15 Sch=dpset_property CLOCK_DEDICATED_ROUTE FALSE [get_nets cho24_12_IBUF]","tags":["数字电路实验"],"categories":["硬件"]},{"title":"LaTex食用指南","path":"/2024/02/12/LaTex食用指南/","content":"环境安装本地环境方法 1：VS code + LaTex Workshop提前安装好 TeX Live 环境，在 VS code 中安装 LaTex Workshop 插件，并在 VS code 设置界面打开 settings.json，加入代码 latex-workshop.latex.recipes: [ name: XeLaTeX, tools: [xelatex] , name: PDFLaTeX, tools: [pdflatex] , name: xelatex - bibtex - xelatex*2, tools: [xelatex, bibtex, xelatex, xelatex] , name: pdflatex ➞ bibtex ➞ pdflatex * 2, tools: [pdflatex, bibtex, pdflatex, pdflatex] ],latex-workshop.latex.tools: [ name: xelatex, command: xelatex, args: [ -synctex=1, -interaction=nonstopmode, -file-line-error, -shell-escape, %DOCFILE% ], env: , name: latexmk, command: latexmk, args: [ -synctex=1, -interaction=nonstopmode, -file-line-error, -pdf, -outdir=%OUTDIR%, %DOC% ], env: , name: lualatexmk, command: latexmk, args: [ -synctex=1, -interaction=nonstopmode, -file-line-error, -lualatex, -outdir=%OUTDIR%, %DOC% ], env: , name: latexmk_rconly, command: latexmk, args: [%DOC%], env: , name: pdflatex, command: pdflatex, args: [ -synctex=1, -interaction=nonstopmode, -file-line-error, %DOC% ], env: , name: bibtex, command: bibtex, args: [%DOCFILE%], env: , name: rnw2tex, command: Rscript, args: [ -e, knitr::opts_knit$set(concordance = TRUE); knitr::knit(%DOCFILE_EXT%) ], env: , name: jnw2tex, command: julia, args: [-e, using Weave; weave(\\%DOC_EXT%\\, doctype=\\tex\\)], env: , name: jnw2texmintex, command: julia, args: [ -e, using Weave; weave(\\%DOC_EXT%\\, doctype=\\texminted\\) ], env: , name: tectonic, command: tectonic, args: [--synctex, --keep-logs, %DOC%.tex], env: ],window.zoomLevel: -1 再在 VS code 中打开后缀为.tex 的文件，并点击插件页面的 View LaTex PDF，就可以得到输出的 PDF本方式适合在离线或者对网络要求不高的环境中操作。 方法 2：Texworks editor安装好 TeX Live 环境后，会获得 Texworks editor 软件，无需配置，打开即用，但是使用起来较麻烦。 在线环境推荐一个在线编辑 LaTex 文档的利器Overleaf, Online LaTeX Editor，无需提前安装环境，还可以多人协作，方便好用。 常用语句这里以一篇文章常用的语句为例。 正文\\documentclassarticle\\titlepassage title\\begindocument\\maketitle%添加标题\\tableofcontents%添加目录\\sectiondocument%添加段落\\enddocument 宏包\\usepackagepdfpages% 在 LaTeX 文档中插入外部 PDF 文件的页面\\usepackagelongtable% 允许创建超过一页的表格，自动处理表头和表尾的重复，以及在页面切换时正确显示表格的分页符号。\\usepackagetabu% 扩展了标准的 tabular 环境，并引入了一些新的功能和选项，用于控制表格的布局和样式。\\usepackagelistings% 在文档中插入源代码,支持多种编程语言和代码风格，并提供了一些选项，用于控制代码的显示方式。\\usepackageparalist% 扩展了标准的列表环境，并引入了一些新的功能，例如紧凑的列表布局和自定义标签样式。\\usepackageamsmath% 提供了一些增强的数学功能和环境，用于编写数学公式和方程。\\usepackagegraphicx% 允许在 LaTeX 文档中插入图像文件，控制插入的图像的位置、大小和样式。\\usepackagexcolor% 使用颜色，定义新的颜色，或者使用预定义的颜色。\\usepackagearray% 提供了一些新的列类型和命令，用于控制表格的布局和样式\\usepackagectex% 支持中文排版，包括中文字体设置、中文标点样式等。 公式LaTex 中的公式有非常多样的插入方式，主要有以下四种： 行内公式$y = ax + b$\\(\\frac12 x^2\\) 行间公式$$y = ax + b$$\\[\\frac12 x^2\\] 带编号公式\\beginequationy = ax + b\\endequation 对齐公式\\beginalignu = 2x + 3y \\\\v = 5x - 1y\\endalign 一些很好用的网站Overleaf, Online LaTeX Editor在线编辑 LaTexLaTeX Tables Editor制作 LaTex 中的表格","tags":["LaTex"],"categories":["杂谈"]},{"title":"md常用语法","path":"/2023/12/06/md常用语法/","content":"Markdown 目录：[TOC]Markdown 标题：# 这是 H1## 这是 H2### 这是 H3Markdown 列表：- 列表项目1. 列表项目*斜体*或*斜体***粗体****_加粗斜体_**~~删除线~~Markdown 插入链接：[链接文字](链接网址 标题)Markdown 插入图片：![alt text](/path/to/img.jpg Title)Markdown 插入代码块：`python #!/usr/bin/python3 print(Hello, World!); `Markdown 引用： 引用内容## Markdown 分割线：Markdown 换行：brMarkdown 段首缩进：ensp; or #8194; 表示一个半角的空格emsp; or #8195; 表示一个全角的空格emsp;emsp; 两个全角的空格（用的比较多）nbsp; or #160; 不断行的空白格","tags":["md"],"categories":["杂谈"]},{"title":"基于openCV的视频查看器","path":"/2023/12/06/基于openCV的视频查看器/","content":"import osimport cv2# 视频文件夹路径folder_path = D:/Users/video# 获取文件夹中的所有视频文件video_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.lower().endswith((.mp4, .avi, .mkv))]# 创建一个视频播放窗口cv2.namedWindow(Video Player, cv2.WINDOW_NORMAL)# 初始化视频索引current_index = 0total_videos = len(video_files)while True: # 读取当前索引处的视频文件 video_path = video_files[current_index] video = cv2.VideoCapture(video_path) while video.isOpened(): # 读取视频帧 ret, frame = video.read() if not ret: break # 显示视频帧 cv2.imshow(Video Player, frame) # 按下 q 键退出当前视频 if cv2.waitKey(1) 0xFF == ord(q): break # 释放当前视频的资源 video.release() # 等待用户按键 key = cv2.waitKey(0) # 根据按键进行操作 if key == ord(a): # 按下 a 键退出播放器 break elif key == ord(s): # 按下 s 键播放下一个视频 current_index = (current_index + 1) % total_videos elif key == ord(d): # 按下 d 键播放上一个视频 current_index = (current_index - 1) % total_videos# 关闭窗口cv2.destroyAllWindows()","tags":["openCV"],"categories":["软件"]},{"title":"基于openCV的图片查看器","path":"/2023/12/06/基于openCV的图片查看器/","content":"import osimport cv2# 图片文件夹路径folder_path = D:/Users/image# 获取文件夹中的所有图片文件image_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.lower().endswith((.png, .jpg, .jpeg))]# 创建一个图片显示窗口cv2.namedWindow(Image Viewer, cv2.WINDOW_NORMAL)# 初始化图片索引current_index = 0total_images = len(image_files)while True: # 读取当前索引处的图片 image_path = image_files[current_index] image = cv2.imread(image_path) # 显示图片 cv2.imshow(Image Viewer, image) # 等待用户按键 key = cv2.waitKey(0) # 根据按键进行操作 if key == ord(a): # 按下a键退出 break elif key == ord(s): # 按下s键显示下一张图片 current_index = (current_index + 1) % total_images elif key == ord(d): # 按下d键显示上一张图片 current_index = (current_index - 1) % total_images# 关闭窗口cv2.destroyAllWindows()","tags":["openCV"],"categories":["软件"]},{"title":"Some poems","path":"/2023/10/10/poems/","content":"这里会贴一些我很喜欢的诗歌:D睡前读一首小诗，然后做个好梦. 万一顾城我害怕 期待也害怕 巨大的幸福我喜欢每天收一粒稻谷在万字中走一的道路 镜中张枣只要想起一生中后悔的事梅花便落了下来比如看她游泳到河的另一岸比如登上一株松木梯子危险的事固然美丽不如看她骑马归来面颊温暖羞惭。低下头，回答着皇帝一面镜子永远等候她让她坐到镜中常坐的地方望着窗外，只要想起一生中后悔的事梅花便落满了南山 你还在我身旁戴畅瀑布的水逆流而上，蒲公英的种子从远处飘回，聚成伞的模样，太阳从西方升起，落向东方。 子弹退回枪膛，运动员回到起跑线上，我交回录取通知书，忘了十年寒窗。 厨房里飘来饭菜的香，你把我的卷子签好名字，关掉电视，帮我把书包背上。 你还在我身旁。 木兰花·拟古决绝词柬友纳兰性德人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故人心易变。","tags":["poem"],"categories":["杂谈"]},{"title":"Hello,fufu","path":"/2023/10/09/Hello-fufu/","content":"As you see,this is my first passage.","tags":["fufu"],"categories":["杂谈"]},{"path":"/qjsc/index.html","content":"公寓岗小助手 * { box-sizing: border-box; -webkit-tap-highlight-color: transparent; } body { font-family: system-ui, -apple-system, sans-serif; margin: 0; padding: 16px; background-color: #f5f5f5; font-size: 16px; } .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 12px; padding: 20px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); } /* 新增常用链接样式 */ .quick-links { display: flex; gap: 12px; margin-bottom: 24px; } .quick-link-btn { flex: 1; padding: 14px; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; color: white; background-color: #2196f3; cursor: pointer; transition: all 0.2s; } .quick-link-btn:active { background-color: #1976d2; } h2 { text-align: center; margin: 0 0 24px 0; color: #333; font-size: 1.5rem; } .form-group { margin-bottom: 20px; } .time-group { display: flex; gap: 12px; align-items: center; } .time-group span { color: #666; font-weight: 600; } .time-input { flex: 1; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 1rem; background-color: #fff; } .time-input:focus { outline: none; border-color: #2196f3; } label { display: block; margin-bottom: 8px; font-weight: 600; color: #444; font-size: 1rem; } select, input { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 1rem; appearance: none; -webkit-appearance: none; background-color: #fff; } select { background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\"); background-repeat: no-repeat; background-position: right 12px center; background-size: 16px; padding-right: 40px; } input:focus, select:focus { outline: none; border-color: #2196f3; } #date { background-color: #f8f8f8; color: #666; } .button-group { display: flex; flex-direction: column; gap: 12px; margin-top: 24px; } button { width: 100%; padding: 16px; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; color: white; cursor: pointer; transition: all 0.2s; -webkit-tap-highlight-color: transparent; } .generate-btn { background-color: #2196f3; } .generate-btn:active { background-color: #1976d2; } .copy-button { background-color: #4caf50; } .copy-button:active { background-color: #45a049; } .position-grid { display: grid; grid-template-columns: repeat(6, 1fr); gap: 8px; margin-top: 8px; } .position-btn { padding: 12px 4px; background-color: #f0f0f0; color: #333; font-size: 0.9rem; font-weight: normal; } .position-btn.selected { background-color: #2196f3; color: white; } .result { margin-top: 24px; padding: 16px; background-color: #f8f8f8; border-radius: 8px; word-break: break-all; } .result p { margin: 8px 0; line-height: 1.5; } .result p:last-child { font-size: 1.1rem; font-weight: 600; color: #333; } .fixed-bottom { position: fixed; bottom: 0; left: 0; right: 0; padding: 12px 16px; background-color: #fff; box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1); } .bottom-spacing { height: 80px; } .selected-position { margin-top: 12px; padding: 8px; background-color: #e3f2fd; border-radius: 4px; text-align: center; font-weight: bold; color: #1976d2; } #tempTimeGroup { display: none; } 主管常用表格 排班表 空岗表 裸辞表 黑名单 请假信息生成器 日期标记 今天 明天 后天 周一 周二 周三 周四 周五 周六 周日 具体日期 班次 早班 午班 晚班 楼栋号 请选择楼栋号 姓名 请假类型 请假 请假不当 接班 临时请假 临时请假时间 至 生成请假信息 let selectedPosition = \"\"; function initializePositionGrid() { const grid = document.getElementById(\"position-grid\"); for (let i = 1; i selectPosition(\"5A#\"); buttonB.onclick = () => selectPosition(\"5B#\"); grid.appendChild(buttonA); grid.appendChild(buttonB); } else { const button = document.createElement(\"button\"); button.textContent = `${i}#`; button.className = \"position-btn\"; button.onclick = () => selectPosition(`${i}#`); grid.appendChild(button); } } } function toggleTempTimeGroup() { const leaveType = document.getElementById(\"leaveType\").value; const tempTimeGroup = document.getElementById(\"tempTimeGroup\"); tempTimeGroup.style.display = leaveType === \"临时请假\" ? \"block\" : \"none\"; } function selectPosition(position) { selectedPosition = position; document.querySelectorAll(\".position-btn\").forEach((btn) => { btn.classList.remove(\"selected\"); if (btn.textContent === position) { btn.classList.add(\"selected\"); } }); document.getElementById( \"selected-position\" ).textContent = `已选择: ${position}`; } function getDateOfWeek(dayName) { const days = { 本周一: 1, 本周二: 2, 本周三: 3, 本周四: 4, 本周五: 5, 本周六: 6, 本周日: 0, }; const today = new Date(); const currentDay = today.getDay(); const targetDay = days[dayName]; let diff = targetDay - currentDay; if (targetDay === 0) diff = 7 - currentDay; if (diff { alert(\"复制失败，请手动复制。\"); console.error(\"复制失败:\", err); }); } window.onload = function () { updateDate(); initializePositionGrid(); toggleTempTimeGroup(); };"}]